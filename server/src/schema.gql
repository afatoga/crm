# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Query {
  login(data: AppUserLogin!): AppUserLoginResponse!
  allAppUsers(data: AppUserGroupUniqueInput!): [AppUser!]!
  personsByAppUserGroup(data: PartyByAppUserGroupInput!): [Person!]!
  organizationsByAppUserGroup(data: PartyByAppUserGroupInput!): [Organization!]
  personById(data: PartyByAppUserGroupInput!): ExtendedPerson
  organizationById(data: PartyByAppUserGroupInput!): ExtendedOrganization
  partiesByName(data: PartyByNameInput!): [PartyWithName!]!
  partyRelationships(appUserGroupId: Int!, partyId: Int!): SortedPartyRelationships!
  partyRelationshipTypeList: [PartyRelationshipType!]!
  singlePartyNotes(data: TargetNotesInput!): [Note!]
  tagById(data: TagByAppUserGroupInput!): Tag
  tagsByAppUserGroup(data: TagByAppUserGroupInput!): [ExtendedTag!]!
  singlePartyTags(data: SinglePartyTagsInput!): [Tag!]!
  taggedParties(data: TaggedPartiesInput!): [ExtendedTagParty!]
  tagsByName(data: TagsByNameInput!): [ExtendedTag!]!
  contactTypeList: [ContactType!]!
  partyPrivateContacts(data: PartyContactsInput!): [ExtendedContact!]!
  partyRelationshipContacts(data: PartyRelationshipContactsInput!): [ExtendedContact!]!
  contactsByProps(data: ContactInput!): [Contact!]
  statusList: [Status!]!
}

type AppUserLoginResponse {
  appUser: AppUser!
  accessToken: String!
}

type AppUser {
  id: ID!
  email: String!
  password: String!
  nickname: String
  appUserGroupRelationships: [AppUserGroupRelationship!]!
  count: Float!
}

type AppUserGroupRelationship {
  appUserId: Float!
  appUserGroupId: Float!
  appUserRoleId: Float!
}

input AppUserLogin {
  email: String!
  password: String!
}

input AppUserGroupUniqueInput {
  id: Float!
}

type Person {
  partyId: ID!
  preDegree: String
  name: String!
  surname: String!
  postDegree: String
  birthday: String
}

input PartyByAppUserGroupInput {
  appUserGroupId: Int!
  partyTypeId: Float
  id: Int
  statusId: Int
}

type Organization {
  partyId: ID!
  name: String!
  typeId: Float
}

type ExtendedPerson {
  partyId: ID!
  preDegree: String
  name: String!
  surname: String!
  postDegree: String
  birthday: String
  statusId: Float
}

type ExtendedOrganization {
  partyId: ID!
  name: String!
  typeId: Float
  statusId: Float
}

type PartyWithName {
  id: ID!
  typeId: Float!
  name: String
}

input PartyByNameInput {
  searchedName: String!
  appUserGroupId: Int!
  statusId: Int
}

type SortedPartyRelationships {
  organizationToOrganization: [ExtendedPartyRelationship!]!
  personToOrganization: [ExtendedPartyRelationship!]!
  personToPerson: [ExtendedPartyRelationship!]!
}

type ExtendedPartyRelationship {
  id: ID!
  typeId: Float
  firstPartyId: Float!
  firstPartyTypeId: Float!
  secondPartyId: Float!
  secondPartyTypeId: Float!
  firstPartyName: String!
  secondPartyName: String!
}

type PartyRelationshipType {
  id: ID!
  name: String!
  category: String
}

type Note {
  id: ID!
  content: String!
  appUserId: Float!
  appUserGroupId: Float
}

input TargetNotesInput {
  noteTarget: String!
  noteTargetId: Float!
}

type Tag {
  id: ID!
  statusId: Float
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime
  appUserGroupId: Float
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

input TagByAppUserGroupInput {
  appUserGroupId: Int!
  id: Int
  statusId: Int
}

type ExtendedTag {
  id: ID!
  statusId: Float
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime
  appUserGroupId: Float
  statusName: String
}

input SinglePartyTagsInput {
  partyId: Int!
  appUserGroupId: Int!
}

type ExtendedTagParty {
  tagId: ID!
  partyId: ID!
  tagName: String
  personFullName: String
  organizationName: String
  typeId: ID!
}

input TaggedPartiesInput {
  tagId: Int!
  appUserGroupId: Int!
}

input TagsByNameInput {
  searchedName: String!
  appUserGroupId: Int!
  statusId: Int
}

type ContactType {
  id: ID!
  name: String!
}

type ExtendedContact {
  id: ID!
  typeId: ID
  statusId: ID
  value: String!
  createdAt: DateTime!
  updatedAt: DateTime
  mainPartyId: ID!
  partyRelationshipId: Float
  appUserGroupId: ID!
  contactType: ContactType
  status: Status
}

type Status {
  id: ID!
  name: String!
}

input PartyContactsInput {
  partyId: Int!
  statusId: Int
  appUserGroupId: Int!
}

input PartyRelationshipContactsInput {
  partyId: Int!
  partyRelationshipIdList: [Int!]!
  statusId: Int
  appUserGroupId: Int!
}

type Contact {
  id: ID!
  typeId: ID
  statusId: ID
  value: String!
  createdAt: DateTime!
  updatedAt: DateTime
  mainPartyId: ID!
  partyRelationshipId: Float
  appUserGroupId: ID!
}

input ContactInput {
  id: Int
  typeId: Int
  statusId: Int
  value: String
  mainPartyId: Int!
  partyRelationshipId: Int
  appUserGroupId: Int!
}

type Mutation {
  createUpdateAppUser(data: AppUserInput!): APIResponse!
  createPerson(data: PersonInput!): Person!
  updatePerson(data: PersonInput!): Person!
  deletePerson(data: DeletePartyInput!): APIResponse!
  createOrganization(data: OrganizationInput!): Organization!
  updateOrganization(data: OrganizationInput!): Organization!
  deleteOrganization(data: DeletePartyInput!): APIResponse!
  createPartyRelationship(data: PartyRelationshipInput!): PartyRelationship!
  updatePartyRelationship(data: UpdatePartyRelationshipInput!): PartyRelationship!
  deletePartyRelationship(appUserGroupId: Int!, id: Int!): APIResponse!
  createUpdateNote(data: NoteInput!): APIResponse!
  createTag(data: TagInput!): Tag!
  updateTag(data: TagInput!): Tag!
  deleteTagParty(data: DeleteTagPartyInput!): APIResponse!
  createTagParty(data: CreateTagPartyInput!): APIResponse!
  deleteContact(data: DeleteContactInput!): APIResponse!
  createContact(data: ContactInput!): Contact!
  updateContact(data: ContactInput!): Contact!
}

type APIResponse {
  status: ResponseStatus!
  message: String!
}

# API Response status
enum ResponseStatus {
  SUCCESS
  ERROR
}

input AppUserInput {
  id: Float
  email: String

  # password is not hashed yet
  password: String
  nickname: String
  appUserGroupId: Float
  appUserRoleId: Float
}

input PersonInput {
  partyId: Int
  statusId: Int
  preDegree: String
  name: String!
  surname: String!
  postDegree: String
  birthday: DateTime
  appUserGroupId: Int
}

input DeletePartyInput {
  partyId: Int!
  appUserGroupId: Int!
}

input OrganizationInput {
  partyId: Int
  statusId: Int
  name: String!
  typeId: Int
  appUserGroupId: Int
}

type PartyRelationship {
  id: ID!
  typeId: Float
  firstPartyId: Float!
  firstPartyTypeId: Float!
  secondPartyId: Float!
  secondPartyTypeId: Float!
}

input PartyRelationshipInput {
  firstPartyId: Int
  secondPartyId: Int
  typeId: Int
  appUserGroupId: Int
}

input UpdatePartyRelationshipInput {
  id: Float
  firstPartyId: Float
  secondPartyId: Float
  typeId: Float
}

input NoteInput {
  id: Float
  content: String!
  noteTarget: String!
  noteTargetId: Float!
  isPrivate: Boolean
}

input TagInput {
  id: Int
  statusId: Int
  name: String!
  partyId: Int
  appUserGroupId: Int
}

input DeleteTagPartyInput {
  partyId: Int!
  tagId: Int!
  appUserGroupId: Int!
}

input CreateTagPartyInput {
  tagId: Int!
  partyId: Int!
  appUserGroupId: Int!
}

input DeleteContactInput {
  id: Int!
  appUserGroupId: Int!
}
